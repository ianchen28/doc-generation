#!/bin/bash

# =================================================================
# AIDocGenerator - Âø´ÈÄüÂêØÂä®ËÑöÊú¨ (ÈõÜÊàêËá™Âä®Êó•ÂøóËΩÆËΩ¨Áâà)
# ÂäüËÉΩÔºöÊ∏ÖÁêÜÁéØÂ¢É -> Ê£ÄÊü•‰æùËµñ -> ËÆæÁΩÆÊó•ÂøóËΩÆËΩ¨ -> ÂêØÂä® Celery -> ÂêØÂä® Uvicorn -> ÂêéÂè∞ËøêË°å
# ÊâÄÊúâÊó•ÂøóÁªü‰∏ÄËæìÂá∫Âà∞ logs/app.logÔºåËá™Âä®ÊåâÂ§ßÂ∞èËΩÆËΩ¨
# =================================================================

# --- Êó•ÂøóÈ¢úËâ≤ ---
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

# --- Ëé∑ÂèñËÑöÊú¨ÊâÄÂú®ÁõÆÂΩï ---
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# --- ÂêéÂè∞ËøêË°åÁõ∏ÂÖ≥Êñá‰ª∂ ---
PID_FILE="$DIR/service.pid"
LOG_DIR="$DIR/logs"
UNIFIED_LOG="$LOG_DIR/app.log"

# --- Êó•ÂøóËΩÆËΩ¨ÈÖçÁΩÆ ---
LOG_SIZE="10M"  # Êó•ÂøóÊñá‰ª∂Â§ßÂ∞èÈôêÂà∂
LOG_ROTATE_COUNT=5  # ‰øùÁïôÁöÑÊó•ÂøóÊñá‰ª∂Êï∞Èáè

# --- ÂàõÂª∫Êó•ÂøóÁõÆÂΩïÂíåÂàùÂßãÊó•ÂøóÊñá‰ª∂ ---
mkdir -p "$LOG_DIR"
touch "$UNIFIED_LOG"

# --- Ê£ÄÊü•ÊòØÂê¶Â∑≤ÁªèÂú®ËøêË°å ---
if [ -f "$PID_FILE" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Ê£ÄÊµãÂà∞ÊúçÂä°ÂèØËÉΩÂ∑≤Âú®ËøêË°å (PIDÊñá‰ª∂Â≠òÂú®)${NC}"
    echo -e "   - PIDÊñá‰ª∂: $PID_FILE"
    echo -e "   - Áªü‰∏ÄÊó•Âøó: $UNIFIED_LOG"
    echo ""
    read -p "ÊòØÂê¶Ë¶ÅÂÅúÊ≠¢Áé∞ÊúâÊúçÂä°Âπ∂ÈáçÊñ∞ÂêØÂä®? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}Ê≠£Âú®ÂÅúÊ≠¢Áé∞ÊúâÊúçÂä°...${NC}"
        "$DIR/stop_dev_server.sh"
        rm -f "$PID_FILE"
    else
        echo -e "${GREEN}‰øùÊåÅÁé∞ÊúâÊúçÂä°ËøêË°å„ÄÇ${NC}"
        echo -e "   - ÊúçÂä°Âú∞ÂùÄ: http://127.0.0.1:8000"
        echo -e "   - APIÊñáÊ°£: http://127.0.0.1:8000/docs"
        echo -e "   - Áªü‰∏ÄÊó•Âøó: $UNIFIED_LOG"
        echo -e "   - ‰ΩøÁî® './stop_dev_server.sh' ÂÅúÊ≠¢ÊúçÂä°"
        exit 0
    fi
fi

# --- Ê≠•È™§ 0: Âº∫Âà∂Ê∏ÖÁêÜ ---
echo -e "${YELLOW}üîµ Ê≠•È™§ 0: Ê≠£Âú®Âº∫Âà∂Ê∏ÖÁêÜÂèØËÉΩÊÆãÁïôÁöÑÊóßÊúçÂä°...${NC}"
"$DIR/stop_dev_server.sh"
echo ""

# --- ÂêéÁª≠Ê≠•È™§ ---
DEFAULT_PORT=8000
PORT=${1:-$DEFAULT_PORT}

echo -e "${GREEN}üöÄ ÂáÜÂ§áÂêØÂä® AI ÊñáÊ°£ÁîüÊàêÂô®ÊúçÂä° (ÈõÜÊàêËá™Âä®Êó•ÂøóËΩÆËΩ¨Áâà)...${NC}"
echo "=========================================="
echo "Á´ØÂè£: $PORT"
echo "Áªü‰∏ÄÊó•Âøó: $UNIFIED_LOG"
echo "Êó•ÂøóËΩÆËΩ¨: Ëá™Âä®Êåâ $LOG_SIZE Â§ßÂ∞èËΩÆËΩ¨"
echo ""

# --- Ê≠•È™§ 1: Ê£ÄÊü•‰æùËµñ ---
echo -e "${YELLOW}üîµ Ê≠•È™§ 1: Ê£ÄÊü•Á≥ªÁªü‰æùËµñ...${NC}"
if ! redis-cli ping > /dev/null 2>&1; then
    echo -e "   - ${RED}ÈîôËØØ: Redis ÊúçÂä°Êú™ËøêË°åÊàñÊó†Ê≥ïËÆøÈóÆ„ÄÇËØ∑ÂÖàÂêØÂä® Redis„ÄÇ${NC}"
    exit 1
fi
echo "   - ‚úÖ Redis ÊúçÂä°Ê≠£Â∏∏ËøêË°å"

# --- Ê≠•È™§ 2: ÊøÄÊ¥ª conda ÁéØÂ¢É ---
echo -e "\n${YELLOW}üîµ Ê≠•È™§ 2: ÊøÄÊ¥ª conda ÁéØÂ¢É...${NC}"
if [[ "$CONDA_DEFAULT_ENV" != "ai-doc" ]]; then
    echo "   - ‚ö†Ô∏è  ÂΩìÂâçÁéØÂ¢É‰∏çÊòØ 'ai-doc'ÔºåËØ∑ÂÖàËøêË°å 'conda activate ai-doc'"
    exit 1
fi
echo "   - ‚úÖ ÂΩìÂâçÁéØÂ¢ÉÊòØ 'ai-doc'"

# --- Ê≠•È™§ 3: ËÆæÁΩÆÊó•ÂøóËΩÆËΩ¨ ---
echo -e "\n${YELLOW}üîµ Ê≠•È™§ 3: ËÆæÁΩÆËá™Âä®Êó•ÂøóËΩÆËΩ¨...${NC}"

# ÂàõÂª∫Ëá™ÂÆö‰πâÁöÑÊó•ÂøóËΩÆËΩ¨ÂáΩÊï∞
setup_log_rotation() {
    local log_file="$1"
    local max_size="$2"
    local backup_count="$3"
    
    # Ê£ÄÊü•ÂΩìÂâçÊó•ÂøóÊñá‰ª∂Â§ßÂ∞è
    if [ -f "$log_file" ]; then
        local current_size=$(stat -f%z "$log_file" 2>/dev/null || stat -c%s "$log_file" 2>/dev/null)
        local max_size_bytes
        if [[ "$max_size" == *K ]]; then
            max_size_bytes=$(echo "$max_size" | sed 's/K$//' | awk '{print $1 * 1024}')
        elif [[ "$max_size" == *M ]]; then
            max_size_bytes=$(echo "$max_size" | sed 's/M$//' | awk '{print $1 * 1024 * 1024}')
        elif [[ "$max_size" == *G ]]; then
            max_size_bytes=$(echo "$max_size" | sed 's/G$//' | awk '{print $1 * 1024 * 1024 * 1024}')
        else
            max_size_bytes=$(echo "$max_size" | awk '{print $1 * 1024 * 1024}')  # ÈªòËÆ§ÊåâMÂ§ÑÁêÜ
        fi
        
        if [ "$current_size" -gt "$max_size_bytes" ]; then
            echo "   - üîÑ ÂΩìÂâçÊó•ÂøóÊñá‰ª∂Ë∂ÖËøá $max_sizeÔºåÊâßË°åËΩÆËΩ¨..."
            
            # ËΩÆËΩ¨Êó•ÂøóÊñá‰ª∂
            for i in $(seq $((backup_count-1)) -1 1); do
                if [ -f "${log_file}.$i" ]; then
                    mv "${log_file}.$i" "${log_file}.$((i+1))"
                fi
            done
            
            # Â§á‰ªΩÂΩìÂâçÊó•ÂøóÊñá‰ª∂
            if [ -f "$log_file" ]; then
                mv "$log_file" "${log_file}.1"
                echo "   - ‚úÖ Â∑≤Â§á‰ªΩÂΩìÂâçÊó•ÂøóÊñá‰ª∂‰∏∫ ${log_file}.1"
            fi
            
            # ÂàõÂª∫Êñ∞ÁöÑÁ©∫Êó•ÂøóÊñá‰ª∂
            touch "$log_file"
            echo "   - ‚úÖ Â∑≤ÂàõÂª∫Êñ∞ÁöÑÊó•ÂøóÊñá‰ª∂"
            
            # Ê∏ÖÁêÜÊóßÁöÑÂ§á‰ªΩÊñá‰ª∂
            for i in $(seq $((backup_count+1)) 10); do
                if [ -f "${log_file}.$i" ]; then
                    rm -f "${log_file}.$i"
                fi
            done
        else
            echo "   - ‚úÖ ÂΩìÂâçÊó•ÂøóÊñá‰ª∂Â§ßÂ∞èÊ≠£Â∏∏"
        fi
    fi
}

# ËÆæÁΩÆÊó•ÂøóËΩÆËΩ¨
setup_log_rotation "$UNIFIED_LOG" "$LOG_SIZE" "$LOG_ROTATE_COUNT"

# --- Ê≠•È™§ 4: ÂêØÂä® Celery Worker (ÈõÜÊàêÊó•ÂøóËΩÆËΩ¨) ---
echo -e "\n${YELLOW}üîµ Ê≠•È™§ 4: Âú®ÂêéÂè∞ÂêØÂä® Celery Worker (ÈõÜÊàêÊó•ÂøóËΩÆËΩ¨)...${NC}"

# ÂàõÂª∫Â∏¶Êó•ÂøóËΩÆËΩ¨ÁöÑÂêØÂä®ÂáΩÊï∞
start_service_with_log_rotation() {
    local service_name="$1"
    local command="$2"
    local log_file="$3"
    local max_size="$4"
    local backup_count="$5"
    
    # ÂêØÂä®ÊúçÂä°Âπ∂ÁõëÊéßÊó•ÂøóÂ§ßÂ∞è
    (
        # ÂêØÂä®ÊúçÂä°Âπ∂ÈáçÂÆöÂêëËæìÂá∫Âà∞Êó•ÂøóÊñá‰ª∂
        eval "$command >> $log_file 2>&1" &
        local service_pid=$!
        
        # ÁõëÊéßÊó•ÂøóÊñá‰ª∂Â§ßÂ∞è
        while kill -0 $service_pid 2>/dev/null; do
            sleep 30  # ÊØè30ÁßíÊ£ÄÊü•‰∏ÄÊ¨°
            
            # Ê£ÄÊü•Êó•ÂøóÊñá‰ª∂Â§ßÂ∞è
            if [ -f "$log_file" ]; then
                local current_size=$(stat -f%z "$log_file" 2>/dev/null || stat -c%s "$log_file" 2>/dev/null)
                local max_size_bytes
                if [[ "$max_size" == *K ]]; then
                    max_size_bytes=$(echo "$max_size" | sed 's/K$//' | awk '{print $1 * 1024}')
                elif [[ "$max_size" == *M ]]; then
                    max_size_bytes=$(echo "$max_size" | sed 's/M$//' | awk '{print $1 * 1024 * 1024}')
                elif [[ "$max_size" == *G ]]; then
                    max_size_bytes=$(echo "$max_size" | sed 's/G$//' | awk '{print $1 * 1024 * 1024 * 1024}')
                else
                    max_size_bytes=$(echo "$max_size" | awk '{print $1 * 1024 * 1024}')  # ÈªòËÆ§ÊåâMÂ§ÑÁêÜ
                fi
                
                if [ "$current_size" -gt "$max_size_bytes" ]; then
                    echo "[$(date '+%Y-%m-%d %H:%M:%S')] üîÑ $service_name Êó•ÂøóÊñá‰ª∂Ë∂ÖËøá $max_sizeÔºåÊâßË°åËΩÆËΩ¨..." >> "$log_file"
                    
                    # ËΩÆËΩ¨Êó•ÂøóÊñá‰ª∂
                    for i in $(seq $((backup_count-1)) -1 1); do
                        if [ -f "${log_file}.$i" ]; then
                            mv "${log_file}.$i" "${log_file}.$((i+1))"
                        fi
                    done
                    
                    # Â§á‰ªΩÂΩìÂâçÊó•ÂøóÊñá‰ª∂
                    if [ -f "$log_file" ]; then
                        mv "$log_file" "${log_file}.1"
                    fi
                    
                    # ÂàõÂª∫Êñ∞ÁöÑÁ©∫Êó•ÂøóÊñá‰ª∂
                    touch "$log_file"
                    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ‚úÖ $service_name Êó•ÂøóËΩÆËΩ¨ÂÆåÊàê" >> "$log_file"
                    
                    # Ê∏ÖÁêÜÊóßÁöÑÂ§á‰ªΩÊñá‰ª∂
                    for i in $(seq $((backup_count+1)) 10); do
                        if [ -f "${log_file}.$i" ]; then
                            rm -f "${log_file}.$i"
                        fi
                    done
                fi
            fi
        done
    ) &
    
    echo $!
}

# ÂêØÂä® Celery Worker
echo "   - ÂêØÂä® Celery Worker..."
(cd service && nohup celery -A workers.celery_worker worker --loglevel=INFO --concurrency=1 >> "$UNIFIED_LOG" 2>&1) &
CELERY_PID=$!

sleep 3 # Á≠âÂæÖËøõÁ®ãÂêØÂä®
if ! ps -p $CELERY_PID > /dev/null; then
   echo "   - ${RED}Celery Worker ÂêØÂä®Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•Êó•ÂøóÊñá‰ª∂: $UNIFIED_LOG${NC}"
   exit 1
fi
echo "   - ‚úÖ Celery Worker Â∑≤Âú®ÂêéÂè∞ÂêØÂä®ÔºåPID: $CELERY_PID"
echo "   - Áªü‰∏ÄÊó•ÂøóÊñá‰ª∂: $UNIFIED_LOG (Ëá™Âä®ËΩÆËΩ¨)"

# --- Ê≠•È™§ 5: ÂêØÂä® FastAPI (ÈõÜÊàêÊó•ÂøóËΩÆËΩ¨) ---
echo -e "\n${YELLOW}üîµ Ê≠•È™§ 5: Âú®ÂêéÂè∞ÂêØÂä® FastAPI ÊúçÂä° (ÈõÜÊàêÊó•ÂøóËΩÆËΩ¨)...${NC}"

# ÂêØÂä® FastAPI
echo "   - ÂêØÂä® FastAPI ÊúçÂä°..."
(cd service && nohup uvicorn api.main:app --host 0.0.0.0 --port $PORT --reload >> "$UNIFIED_LOG" 2>&1) &
UVICORN_PID=$!

sleep 5 # Á≠âÂæÖÊúçÂä°ÂêØÂä®

# Ê£ÄÊü•ÊúçÂä°ÊòØÂê¶ÊàêÂäüÂêØÂä®
if ! ps -p $UVICORN_PID > /dev/null; then
   echo "   - ${RED}FastAPI ÊúçÂä°ÂêØÂä®Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•Êó•ÂøóÊñá‰ª∂: $UNIFIED_LOG${NC}"
   # Ê∏ÖÁêÜÂ∑≤ÂêØÂä®ÁöÑ Celery
   kill $CELERY_PID 2>/dev/null
   exit 1
fi

# Á≠âÂæÖÁ´ØÂè£ÂèØÁî®
echo "   - ‚è≥ Á≠âÂæÖÊúçÂä°ÂÆåÂÖ®ÂêØÂä®..."
for i in {1..10}; do
    if curl -s http://127.0.0.1:$PORT/health > /dev/null 2>&1; then
        break
    fi
    sleep 1
done

# ÂêØÂä®ÂêéÂè∞Êó•ÂøóËΩÆËΩ¨ÁõëÊéßËøõÁ®ã
echo "   - ÂêØÂä®Êó•ÂøóËΩÆËΩ¨ÁõëÊéßËøõÁ®ã..."
(
    while true; do
        sleep 30  # ÊØè30ÁßíÊ£ÄÊü•‰∏ÄÊ¨°
        if [ -f "$UNIFIED_LOG" ]; then
            current_size=$(stat -f%z "$UNIFIED_LOG" 2>/dev/null || stat -c%s "$UNIFIED_LOG" 2>/dev/null)
            if [[ "$LOG_SIZE" == *K ]]; then
                max_size_bytes=$(echo "$LOG_SIZE" | sed 's/K$//' | awk '{print $1 * 1024}')
            elif [[ "$LOG_SIZE" == *M ]]; then
                max_size_bytes=$(echo "$LOG_SIZE" | sed 's/M$//' | awk '{print $1 * 1024 * 1024}')
            elif [[ "$LOG_SIZE" == *G ]]; then
                max_size_bytes=$(echo "$LOG_SIZE" | sed 's/G$//' | awk '{print $1 * 1024 * 1024 * 1024}')
            else
                max_size_bytes=$(echo "$LOG_SIZE" | awk '{print $1 * 1024 * 1024}')  # ÈªòËÆ§ÊåâMÂ§ÑÁêÜ
            fi
            
            if [ "$current_size" -gt "$max_size_bytes" ]; then
                echo "[$(date '+%Y-%m-%d %H:%M:%S')] üîÑ Êó•ÂøóÊñá‰ª∂Ë∂ÖËøá $LOG_SIZEÔºåÊâßË°åËΩÆËΩ¨..." >> "$UNIFIED_LOG"
                
                # ËΩÆËΩ¨Êó•ÂøóÊñá‰ª∂
                for i in $(seq $((LOG_ROTATE_COUNT-1)) -1 1); do
                    if [ -f "${UNIFIED_LOG}.$i" ]; then
                        mv "${UNIFIED_LOG}.$i" "${UNIFIED_LOG}.$((i+1))"
                    fi
                done
                
                # Â§á‰ªΩÂΩìÂâçÊó•ÂøóÊñá‰ª∂
                if [ -f "$UNIFIED_LOG" ]; then
                    mv "$UNIFIED_LOG" "${UNIFIED_LOG}.1"
                fi
                
                # ÂàõÂª∫Êñ∞ÁöÑÁ©∫Êó•ÂøóÊñá‰ª∂
                touch "$UNIFIED_LOG"
                echo "[$(date '+%Y-%m-%d %H:%M:%S')] ‚úÖ Êó•ÂøóËΩÆËΩ¨ÂÆåÊàê" >> "$UNIFIED_LOG"
                
                # Ê∏ÖÁêÜÊóßÁöÑÂ§á‰ªΩÊñá‰ª∂
                for i in $(seq $((LOG_ROTATE_COUNT+1)) 10); do
                    if [ -f "${UNIFIED_LOG}.$i" ]; then
                        rm -f "${UNIFIED_LOG}.$i"
                    fi
                done
            fi
        fi
    done
) &
LOG_ROTATION_PID=$!

# ‰øùÂ≠òPIDÂà∞Êñá‰ª∂
echo "$CELERY_PID $UVICORN_PID $LOG_ROTATION_PID" > "$PID_FILE"

echo ""
echo -e "${GREEN}üéâ ÊúçÂä°ÂêØÂä®ÊàêÂäüÔºÅ${NC}"
echo "=========================================="
echo -e "   - ${BLUE}ÊúçÂä°Âú∞ÂùÄ:${NC} http://127.0.0.1:$PORT"
echo -e "   - ${BLUE}APIÊñáÊ°£:${NC} http://127.0.0.1:$PORT/docs"
echo -e "   - ${BLUE}Celery PID:${NC} $CELERY_PID"
echo -e "   - ${BLUE}Uvicorn PID:${NC} $UVICORN_PID"
echo -e "   - ${BLUE}Áªü‰∏ÄÊó•Âøó:${NC} $UNIFIED_LOG"
echo -e "   - ${BLUE}PIDÊñá‰ª∂:${NC} $PID_FILE"
echo -e "   - ${BLUE}Êó•ÂøóËΩÆËΩ¨:${NC} Ëá™Âä®Êåâ $LOG_SIZE Â§ßÂ∞èËΩÆËΩ¨"
echo -e "   - ${BLUE}‰øùÁïôÂ§á‰ªΩ:${NC} $LOG_ROTATE_COUNT ‰∏™Êñá‰ª∂"
echo ""
echo -e "${YELLOW}üí° ÁÆ°ÁêÜÂëΩ‰ª§:${NC}"
echo -e "   - Êü•ÁúãÊó•Âøó: tail -f $UNIFIED_LOG"
echo -e "   - Êü•ÁúãÂ§á‰ªΩ: ls -lh ${UNIFIED_LOG}*"
echo -e "   - ÂÆûÊó∂ÁõëÊéß: python view_unified_logs.py monitor"
echo -e "   - ÊêúÁ¥¢Êó•Âøó: python view_unified_logs.py search 'ÂÖ≥ÈîÆËØç'"
echo -e "   - ÂÅúÊ≠¢ÊúçÂä°: $DIR/stop_dev_server.sh"
echo -e "   - Êü•ÁúãÁä∂ÊÄÅ: ps aux | grep -E '(celery|uvicorn)'"
echo -e "   - ÊâãÂä®ËΩÆËΩ¨Êó•Âøó: $DIR/log_rotate.sh"
echo ""
echo -e "${GREEN}‚úÖ ÊúçÂä°Â∑≤Âú®ÂêéÂè∞ËøêË°åÔºåÊó•ÂøóËá™Âä®ËΩÆËΩ¨ÂäüËÉΩÂ∑≤ÂêØÁî®${NC}"
echo -e "${GREEN}‚úÖ Êó•ÂøóÊñá‰ª∂Â§ßÂ∞èË∂ÖËøá $LOG_SIZE Êó∂‰ºöËá™Âä®ËΩÆËΩ¨${NC}"
echo -e "${GREEN}‚úÖ ÂèØ‰ª•ÂÆâÂÖ®ÂÖ≥Èó≠ÁªàÁ´Ø„ÄÇ${NC}"
